/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com, and owner of the OPENFOAM® and OpenCFD®      |
|              trade marks.                                                   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

d2dt2Schemes
{
    default    none;
    d2dt2(D)   steadyState;
}

ddtSchemes
{
    default    none;
    d2dt2(D)   steadyState;
    ddt(D)     steadyState;
    //ddt(U)     Euler;
    //ddt(p)     Euler;
    ddt(U)     backward;
    ddt(p)     backward;
}

gradSchemes
{
    default none;
    grad(U) leastSquaresS4f;
    grad(p) leastSquaresS4f;
    grad(D) leastSquaresS4f;
}

divSchemes
{
    default none;

    // Don't use "bounded" as it is zero order accurate!!
    // div(phi,U)      bounded Gauss linearUpwind grad(U);
    div(phi,U)      Gauss linearUpwind grad(U);

    jacobian-div(phi,U) Gauss upwind;

    div(U) Gauss linear;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(devRhoReff) Gauss linear;
}

laplacianSchemes
{
    default Gauss linear corrected;
}

interpolationSchemes
{
    default linear;
}

snGradSchemes
{
    default corrected;
}

fluxRequired
{
    default no;
    p;
}

wallDist
{
    // method          meshWave;
    method          exactDistance;
    //nRequired       yes;
}

// ************************************************************************* //
