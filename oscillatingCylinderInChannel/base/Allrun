#!/usr/bin/env bash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# Options
#     -p
#         if passed, runs the case in parallel
#
# Optional environment variables
#     Mesh density level
:     "${MESH_LEVEL:=1}"
#     Number of mesh subdomains (only used in parallel run)
:     "${NUMBER_OF_SUBDOMAINS:=4}"
#     Fluid model to be called by solids4Foam (pimpleFluid, newtonIcoFluid)
:     "${FLUID_MODEL:=pimpleFluid}"
#     Mesh type:
#         QUAD          structured uniform quadrilateral mesh
#         QUAD_GRADED   structured graded quadrilateral mesh
#         TRI           unstructured triangular mesh
#         POLY          unstructured polyhedral mesh
:     "${MESH:=QUAD}"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
cd "${0%/*}" || exit    # Run from this directory
set -e

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

case "${MESH}" in
    "QUAD" | "QUAD_GRADED")
        # Set the blockMeshDict
        BLOCKMESHDICT="system/blockMeshDict"
        if [[ "$MESH" == "QUAD_GRADED" ]]
        then
            BLOCKMESHDICT="${BLOCKMESHDICT}.graded"
        else
            BLOCKMESHDICT="${BLOCKMESHDICT}.uniform"
        fi

        if [[ ! -f "${BLOCKMESHDICT}" ]]
        then
            printf "Cannot find ./%s: please add it to ./system/\n\n" \
                   "${BLOCKMESHDICT}" >&2
            exit 1
        fi

        echo "Generating ${MESH} mesh using blockMesh."

        # Generate the mesh using blockMesh
        MESH_LEVEL=${MESH_LEVEL} \
            runApplication blockMesh -dict "${BLOCKMESHDICT}"
        ;;

    "TRI" | "POLY")
        if ! command -v gmsh &> /dev/null
        then
            echo "gmsh not found: please install it" >&2
            exit 1
        fi

        echo "Generating ${MESH} mesh using Gmsh."

        # Generate the mesh using Gmsh
        runApplication gmsh -3 -format msh2 -setnumber meshLevel ${MESH_LEVEL} \
            gmsh/oscillatingCylinderInChannel.geo \
            -o gmsh/oscillatingCylinderInChannel.msh

        # Convert Gmsh mesh to OpenFOAM format
        runApplication gmshToFoam gmsh/oscillatingCylinderInChannel.msh

        if [[ "${MESH}" == "POLY" ]]
        then
            mv 0 0.tmp

            # Convert to polyhedral mesh
            runApplication polyDualMesh 45 -overwrite

            # Combine faces into larger polygons so that the angle between edges
            # is less than 45 degrees.
            runApplication combinePatchFaces 45 -overwrite

            # Extrude the 2D mesh into 3D from `back` to `front`
            runApplication extrudeMesh

            # Assign boundary patches proper type
            runApplication changeDictionary

            mv 0.tmp 0
        fi

        # Merge `front` and `back` patches into one patch: `frontAndBack`
        runApplication createPatch -overwrite
        ;;

    *)
        echo "Invalid mesh type: '${MESH}'." >&2
        echo "Choose one of QUAD, QUAD_GRADED, TRI or POLY." >&2
        exit 1
        ;;
esac

if [ "$1" = '-p' ];
then
    # Decopose mesh
    NUMBER_OF_SUBDOMAINS=${NUMBER_OF_SUBDOMAINS} runApplication decomposePar

    # Run the solver (parallel)
    FLUID_MODEL=${FLUID_MODEL} runParallel $(getApplication)

    # Deconstruct the result
    runApplication reconstructPar -no-fields -latestTime
else
    # Run the solver (serial)
    FLUID_MODEL=${FLUID_MODEL} runApplication $(getApplication)
fi

# Generate the plots
# NOTE(abzrg): For testing purposes and sanity checks I plotted the force
#              coefficients in two ways:
#              1) using the data from `forces` function object,
#              2) using the data from `forceCoeffs` function object.
cp ../plotScripts/*.gnuplot .
cp ../validationData/*.dat .

for script in ./*.gnuplot
do
    gnuplot -c "${script}"
done
